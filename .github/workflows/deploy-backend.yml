name: Build and Deploy Backend

on:
  push:
    branches:
      - dev  # Trigger this workflow on changes to the 'dev' branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Check out the repository code

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Set up Node.js version 20

    - name: Install dependencies
      run: npm install  # Install Node.js dependencies

    - name: Print environment variables
      run: |
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
        echo "DB_HOST=${{ secrets.DB_HOST }}"
        echo "DB_PORT=${{ secrets.DB_PORT }}"
        echo "DB_NAME=${{ secrets.DB_NAME }}"
        echo "DOCKER_TAG=${{ github.sha }}"

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-be:${{ github.sha }} . # Build the Docker image for the backend

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  # Login to DockerHub

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/task-be:${{ github.sha }}  # Push the Docker image to DockerHub

  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: build  # Ensure the build job completes before deploying

    steps:
    - name: Deploy to VPS
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_IP: ${{ secrets.VPS_IP }}
        DOCKER_TAG_BACKEND: ${{ github.sha }}
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -t -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << EOF
          cd /home/brian/task-manager
          
          # Read the current Docker tag from .env
          CURRENT_DOCKER_TAG=$(grep 'DOCKER_TAG_BACKEND=' .env | cut -d '=' -f 2)
          
          # Remove old Docker image if it exists
          if [ -n "$CURRENT_DOCKER_TAG" ]; then
            docker-compose down
            docker rmi ${{ secrets.DOCKER_USERNAME }}/task-be:$CURRENT_DOCKER_TAG || true
          fi

          # Update .env with new Docker tag
          echo -e "DB_USERNAME=${DB_USERNAME}\nDB_PASSWORD=${DB_PASSWORD}\nDB_HOST=${DB_HOST}\nDB_PORT=${DB_PORT}\nDB_NAME=${DB_NAME}\nDOCKER_TAG_BACKEND=${DOCKER_TAG_BACKEND}" > .env
          cat .env

          # Pull and run the new Docker image
          docker-compose pull backend
          docker-compose up -d backend
        EOF
